!<arch>
0-isupper.c/    0           0     0     644     243       `
#include "main.h"



/**

 * _isupper - Checks for uppercase characters

 * @c: The character to be checked

 * Return: 1 if true and 0 otherwise

 */



int _isupper(int c)

{

	if (c >= 65 && c <= 90)

		return (1);

	else

		return (0);

}

0-memset.c/     0           0     0     644     377       `
#include "main.h"



/**

 * _memset - Fills bytes of the memory with constant bytes

 * @s: The pointer to the memory

 * @b: The byte expected to be constant

 * @n: The memory byte

 *

 * Return: a pointer to the memory area s

 */



char *_memset(char *s, char b, unsigned int n)

{

	unsigned int i = 0;



	for ( ; i < n; i++)

	{

		*(s + i) = b;

	}

	return (s);

}

0-strcat.c/     0           0     0     644     413       `
#include "main.h"



/**

 * _strcat - concatenates two strings

 * @dest: First string

 * @src: The second string

 * Return: a pointer to the returning string dest

 */



char *_strcat(char *dest, char *src)

{

	int i = 0, j = 0;





	while (*(dest + i) != '\0')

	{

		i++;

	}

	while (j >= 0)

	{

		*(dest + i) = *(src + j);

		if (*(src + j) == '\0')

			break;

		i++;

		j++;

	}

	return (dest);

}

1-isdigit.c/    0           0     0     644     244       `
#include "main.h"



/**

 * _isdigit - Checks if a character is a digit

 * @c: the character to be checked

 * Return: 1 if true and 0 otherwisw

 */



int _isdigit(int c)

{

	if (c >= 48 && c <= 57)

		return (1);

	else

		return (0);

}
1-memcpy.c/     0           0     0     644     393       `
#include "main.h"



/**

 * _memcpy - copies n bytes from a memory area src to a memory area dest

 * @dest: The destination memory

 * @src: The source memory

 * @n: the bytes to be copied

 *

 * Return: a pointer to dest

 */



char *_memcpy(char *dest, char *src, unsigned int n)

{

	unsigned int i = 0;



	for ( ; i < n; i++)

	{

		*(dest + i) = *(src + i);

	}

	return (dest);

}

1-strncat.c/    0           0     0     644     571       `
#include "main.h"



/**

 * _strncat - convatenates two strings

 * it will use at most n bytes from src; and

 * src does not need to be null-terminated if it contains n or more bytes

 * @dest: The first string

 * @src: The second string

 * @n: The n bytes to be concatenated

 *

 * Return: a pointer to the resulting string dest

 */



char *_strncat(char *dest, char *src, int n)

{

	int i = 0, j = 0;



	while (dest[i] != '\0')

	{

		i++;

	}

	while (j < n)

	{

		dest[i] = src[j];

		if (src[j] == '\0')

			break;

		i++;

		j++;

	}

	return (dest);

}

100-atoi.c/     0           0     0     644     619       `
#include <stdio.h>

#include "main.h"

/**

 * _atoi - converts a string to an integer.

 * @s: input string.

 * Return: integer.

 */

int _atoi(char *s)

{

	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;



	while (*(s + count) != '\0')

	{

		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))

			break;

		if (*(s + count) == '-')

			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))

		{

			if (size > 0)

				m *= 10;

			size++;

		}

		count++;

	}

	for (i = count - size; i < count; i++)

	{

		oi = oi + ((*(s + i) - 48) * m);

		m /= 10;

	}

	return (oi * pn);

}

2-strchr.c/     0           0     0     644     460       `
#include "main.h"



/**

 * _strchr - locates a character in a string

 * @s: the string

 * @c: the regex character

 *

 * Return: a pointer to the character in the string if found

 * and a pointer to the null terminator if not found

 */



char *_strchr(char *s, char c)

{

	int i = 0, j;



	while (i >= 0)

	{

		if (s[i] == '\0')

			break;

		i++;

	}

	for (j = 0; j <= i; j++)

	{

		if (*(s + j) == c)

			return (s + j);

	}

	return ('\0');

}
2-strlen.c/     0           0     0     644     282       `
#include <stdio.h>

#include "main.h"



/**

 * _strlen - Prints the length of a string

 * @s: The character whose length we will count

 * Return: The length of the string

 */



int _strlen(char *s)

{

	int len = 0;



	while (*(s + len) != '\0')

		len++;

	return (len);

}
2-strncpy.c/    0           0     0     644     423       `
#include "main.h"



/**

 * _strncpy - copies a string and works like splice in js

 * @dest: The first string

 * @src: The string to be copied

 * @n: the position to start copying

 * Return: a pointer to dest

 */



char *_strncpy(char *dest, char *src, int n)

{

	int i;



	for (i = 0; i < n && src[i] != '\0'; i++)

	{

		dest[i] = src[i];

	}

	for ( ; i < n; i++)

	{

		dest[i] = '\0';

	}

	return (dest);

}

3-islower.c/    0           0     0     644     283       `
#include "main.h"

/**

 * _islower - checks for lowercase character

 * @c: is the character to be checked

 *

 * Return: Returns 1 if c is lowercase and 0 if otherwise

 */

int _islower(int c)

{

	if (c >= 97 && c <= 122)

	{

		return (1);

	}

	else

	{

		return (0);

	}

}

3-puts.c/       0           0     0     644     326       `
#include <stdio.h>

#include "main.h"



/**

 * _puts - Prints a string followed by a new line

 * @str: The string to be printed

 * Return: no return

 */



void _puts(char *str)

{

	int i = 0;



	while (i >= 0)

	{

		if (*(str + i) == '\0')

		{

			_putchar('\n');

			break;

		}

		_putchar(str[i]);

		i++;

	}

}
3-strcmp.c/     0           0     0     644     355       `
#include "main.h"



/**

 * _strcmp - compares two strings

 * @s1: The first string

 * @s2: The other string

 *

 * Return: Always ret.

 */



int _strcmp(char *s1, char *s2)

{

	int i = 0, ret = 0;



	while (ret == 0)

	{

		if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))

			break;

		ret = *(s1 + i) - *(s2 + i);

		i++;

	}

	return (ret);

}

3-strspn.c/     0           0     0     644     647       `
#include "main.h"



/**

 * _strspn - gets the length of a prefix substring

 * @s: The string

 * @accept: The bytes on the substring

 *

 * Return:  the number of bytes in the initial segment of s

 * which consist only of bytes from accept

 */



unsigned int _strspn(char *s, char *accept)

{

	int i = 0, a;

	int j = 0, b;

	unsigned int n = 0;



	for ( ; i >= 0; i++)

	{

		if (*(s + i) == ' ')

			break;

	}

	while (j >= 0)

	{

		if (*(accept + j) == '\0')

			break;

		j++;

	}

	for (b = 0; b < j; b++)

	{

		for (a = 0; a < i; a++)

		{

			if (*(accept + b) == *(s + a))

			{

				n = n + 1;

			}

		}

	}

	return (n);

}

4-isalpha.c/    0           0     0     644     296       `
#include "main.h"

/**

 * _isalpha - checks if c is an alphabet

 * @c: is the character to be checked

 *

 * Return: 1 if c is an alphabet and 0 otherwise

 */

int _isalpha(int c)

{

	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))

	{

		return (1);

	}

	else

	{

		return (0);

	}

}
4-strpbrk.c/    0           0     0     644     681       `
#include "main.h"



/**

 * _strpbrk - function locates the first occurrence in the string s

 * of any of the bytes in the string accept

 * @s: The string

 * @accept: sort of like a regex

 *

 * Return: a pointer to the byte in s that matches one of the bytes in accept

 * or NULL if no such byte is found

 */



char *_strpbrk(char *s, char *accept)

{

	int n = 0, b;

	int m = 0, a;



	while (n >= 0)

	{

		if (s[n] == '\0')

			break;

		n++;

	}

	while (m >= 0)

	{

		if (accept[m] == '\0')

			break;

		m++;

	}

	for (b = 0; b < n; b++)

	{

		for (a = 0; a < m; a++)

		{

			if (s[b] == accept[a])

			{

				return (s + b);

			}

		}

	}

	return ('\0');

}

5-strstr.c/     0           0     0     644     653       `
#include "main.h"



/**

 * _strstr - finds the first occurrence of the substring.

 * needle in the string haystack.

 * @haystack: entire string.

 * @needle: substring.

 * Return: pointer to the beginning of located substring or

 * NULL if the substring is not found.

*/



char *_strstr(char *haystack, char *needle)

{

	char *bhaystack;

	char *pneedle;



	while (*haystack != '\0')

	{

		bhaystack = haystack;

		pneedle = needle;



		while (*haystack != '\0' && *pneedle != '\0' && *haystack == *pneedle)

		{

			haystack++;

			pneedle++;

		}

		if (!*pneedle)

			return (bhaystack);

		haystack = bhaystack + 1;

	}

	return (0);

}

6-abs.c/        0           0     0     644     258       `
#include "main.h"

/**

 * _abs - prints the absolute value of an integer

 * @l: The character to be checked

 *

 * Return: returns the absolute value of l

 */

int _abs(int l)

{

	if (l >= 0)

	{

		return (l);

	}

	else

	{

		return (l * -1);

	}

}
9-strcpy.c/     0           0     0     644     350       `
#include <stdio.h>

#include "main.h"



/**

 * _strcpy - copies the string pointed to by str

 * @dest: destination

 * @src: source

 * Return: the pointer to dest

 */



char *_strcpy(char *dest, char *src)

{

	int i = 0;



	while (i >= 0)

	{

		*(dest + i) = *(src + i);

		if (*(src + i) == '\0')

			break;

		i++;

	}

	return (dest);

}
_putchar.c/     0           0     0     644     276       `
#include <unistd.h>

#include "main.h"

/**

 * _putchar - writes the character c to stdout

 * @c: The character to print

 *

 * Return: On success 1.

 * On error, -1 is returned, and errno is set appropriately.

 */

int _putchar(char c)

{

	return (write(1, &c, 1));

}
